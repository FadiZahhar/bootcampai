{"changed":true,"filter":false,"title":"Test","tooltip":"/Test","value":"from sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\nimport numpy as np\nfrom pandas import read_csv\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom keras.utils import np_utils\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import LabelEncoder\nimport pandas as pd\nfrom sklearn.metrics import roc_curve\nfrom sklearn import metrics\ndf = pd.read_csv('cardio_train.csv',delimiter=';')\ndf.rename({'cardio':'Heart_Disease'}, axis=1, inplace=True)\ndf.head()\nfrom sklearn import preprocessing\n# Create the Scaler object\nfloat_cols = ['age','height','weight','ap_hi','ap_lo']\ncat_cols = ['gluc','cholesterol','gender']\nscaler = preprocessing.StandardScaler()\n# Fit your data on the scaler object\nscaled_df = scaler.fit_transform(df[float_cols].values)\nscaled_df = pd.DataFrame(scaled_df, columns=float_cols, index = df.index)\ndf[float_cols] = scaled_df\n# Transform categorical columns in dummy variables\ndf_final = pd.get_dummies(df, prefix_sep=\"__\", columns=cat_cols)\npredictor_columns = [x for x in df_final.columns if x not in [\"Heart_Disease\", \"id\"]]\n# Set randomness\nnp.random.seed(42)\n# Split the data into train and test pieces for both X and Y\nX_train, X_test, y_train, y_test = train_test_split(df_final[predictor_columns], df_final.Heart_Disease, train_size=0.7,test_size=0.3)\n\ndef baseline_model():\n   model = Sequential()\n   model.add(Dense(100,input_dim=(16),activation='sigmoid'))\n   model.add(Dense(200,activation='relu'))\n   model.add(Dense(1,activation='sigmoid'))\n   model.compile(optimizer='adam',loss='binary_crossentropy',metrics = ['accuracy'])\n   return model\nestimator = KerasClassifier(build_fn=baseline_model, epochs=5, batch_size=10, verbose=2)\nestimator.fit(X_train,y_train)\ny_hat = estimator.predict(X_test)\nfrom sklearn.metrics import jaccard_similarity_score\njaccard_similarity_score(y_test, y_hat)\nconf_matrix = metrics.confusion_matrix(y_test, y_hat,labels=[1, 0]).T\nconfusion_matrix_one = pd.DataFrame(conf_matrix, columns=['p', 'n'], index=['Y', 'N'])\nconfusion_matrix_one\n","undoManager":{"mark":-2,"position":10,"stack":[[{"start":{"row":48,"column":20},"end":{"row":49,"column":16},"action":"insert","lines":["","dwdwdwdwdwdwdwdw"],"id":3,"ignore":true}],[{"start":{"row":49,"column":14},"end":{"row":49,"column":16},"action":"remove","lines":["dw"],"id":4,"ignore":true}],[{"start":{"row":49,"column":11},"end":{"row":49,"column":14},"action":"remove","lines":["wdw"],"id":5,"ignore":true}],[{"start":{"row":49,"column":10},"end":{"row":49,"column":11},"action":"remove","lines":["d"],"id":6,"ignore":true}],[{"start":{"row":49,"column":9},"end":{"row":49,"column":10},"action":"remove","lines":["w"],"id":7,"ignore":true}],[{"start":{"row":49,"column":8},"end":{"row":49,"column":9},"action":"remove","lines":["d"],"id":8,"ignore":true}],[{"start":{"row":49,"column":7},"end":{"row":49,"column":8},"action":"remove","lines":["w"],"id":9,"ignore":true}],[{"start":{"row":49,"column":6},"end":{"row":49,"column":7},"action":"remove","lines":["d"],"id":10,"ignore":true}],[{"start":{"row":49,"column":5},"end":{"row":49,"column":6},"action":"remove","lines":["w"],"id":11,"ignore":true}],[{"start":{"row":49,"column":1},"end":{"row":49,"column":5},"action":"remove","lines":["wdwd"],"id":12,"ignore":true}],[{"start":{"row":49,"column":0},"end":{"row":49,"column":1},"action":"remove","lines":["d"],"id":13,"ignore":true}]]},"ace":{"folds":[],"scrolltop":453.65625,"scrollleft":0,"selection":{"start":{"row":45,"column":22},"end":{"row":45,"column":22},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":30,"state":"start","mode":"ace/mode/text"}},"timestamp":1565351192634}